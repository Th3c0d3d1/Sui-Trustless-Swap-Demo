
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Locked
 * Our `Locked` objects list
 */
export type Locked = $Result.DefaultSelection<Prisma.$LockedPayload>
/**
 * Model Escrow
 * Our swap objects list
 */
export type Escrow = $Result.DefaultSelection<Prisma.$EscrowPayload>
/**
 * Model Cursor
 * Saves the latest cursor for a given key.
 */
export type Cursor = $Result.DefaultSelection<Prisma.$CursorPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Lockeds
 * const lockeds = await prisma.locked.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Lockeds
   * const lockeds = await prisma.locked.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.locked`: Exposes CRUD operations for the **Locked** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lockeds
    * const lockeds = await prisma.locked.findMany()
    * ```
    */
  get locked(): Prisma.LockedDelegate<ExtArgs>;

  /**
   * `prisma.escrow`: Exposes CRUD operations for the **Escrow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Escrows
    * const escrows = await prisma.escrow.findMany()
    * ```
    */
  get escrow(): Prisma.EscrowDelegate<ExtArgs>;

  /**
   * `prisma.cursor`: Exposes CRUD operations for the **Cursor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursors
    * const cursors = await prisma.cursor.findMany()
    * ```
    */
  get cursor(): Prisma.CursorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Locked: 'Locked',
    Escrow: 'Escrow',
    Cursor: 'Cursor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "locked" | "escrow" | "cursor"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Locked: {
        payload: Prisma.$LockedPayload<ExtArgs>
        fields: Prisma.LockedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LockedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LockedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>
          }
          findFirst: {
            args: Prisma.LockedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LockedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>
          }
          findMany: {
            args: Prisma.LockedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>[]
          }
          create: {
            args: Prisma.LockedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>
          }
          createMany: {
            args: Prisma.LockedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LockedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>[]
          }
          delete: {
            args: Prisma.LockedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>
          }
          update: {
            args: Prisma.LockedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>
          }
          deleteMany: {
            args: Prisma.LockedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LockedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LockedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LockedPayload>
          }
          aggregate: {
            args: Prisma.LockedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocked>
          }
          groupBy: {
            args: Prisma.LockedGroupByArgs<ExtArgs>
            result: $Utils.Optional<LockedGroupByOutputType>[]
          }
          count: {
            args: Prisma.LockedCountArgs<ExtArgs>
            result: $Utils.Optional<LockedCountAggregateOutputType> | number
          }
        }
      }
      Escrow: {
        payload: Prisma.$EscrowPayload<ExtArgs>
        fields: Prisma.EscrowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EscrowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EscrowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>
          }
          findFirst: {
            args: Prisma.EscrowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EscrowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>
          }
          findMany: {
            args: Prisma.EscrowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>[]
          }
          create: {
            args: Prisma.EscrowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>
          }
          createMany: {
            args: Prisma.EscrowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EscrowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>[]
          }
          delete: {
            args: Prisma.EscrowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>
          }
          update: {
            args: Prisma.EscrowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>
          }
          deleteMany: {
            args: Prisma.EscrowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EscrowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EscrowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EscrowPayload>
          }
          aggregate: {
            args: Prisma.EscrowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEscrow>
          }
          groupBy: {
            args: Prisma.EscrowGroupByArgs<ExtArgs>
            result: $Utils.Optional<EscrowGroupByOutputType>[]
          }
          count: {
            args: Prisma.EscrowCountArgs<ExtArgs>
            result: $Utils.Optional<EscrowCountAggregateOutputType> | number
          }
        }
      }
      Cursor: {
        payload: Prisma.$CursorPayload<ExtArgs>
        fields: Prisma.CursorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CursorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CursorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>
          }
          findFirst: {
            args: Prisma.CursorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CursorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>
          }
          findMany: {
            args: Prisma.CursorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>[]
          }
          create: {
            args: Prisma.CursorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>
          }
          createMany: {
            args: Prisma.CursorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CursorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>[]
          }
          delete: {
            args: Prisma.CursorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>
          }
          update: {
            args: Prisma.CursorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>
          }
          deleteMany: {
            args: Prisma.CursorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CursorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CursorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursorPayload>
          }
          aggregate: {
            args: Prisma.CursorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCursor>
          }
          groupBy: {
            args: Prisma.CursorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CursorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CursorCountArgs<ExtArgs>
            result: $Utils.Optional<CursorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Locked
   */

  export type AggregateLocked = {
    _count: LockedCountAggregateOutputType | null
    _avg: LockedAvgAggregateOutputType | null
    _sum: LockedSumAggregateOutputType | null
    _min: LockedMinAggregateOutputType | null
    _max: LockedMaxAggregateOutputType | null
  }

  export type LockedAvgAggregateOutputType = {
    id: number | null
  }

  export type LockedSumAggregateOutputType = {
    id: number | null
  }

  export type LockedMinAggregateOutputType = {
    id: number | null
    objectId: string | null
    keyId: string | null
    creator: string | null
    itemId: string | null
    deleted: boolean | null
  }

  export type LockedMaxAggregateOutputType = {
    id: number | null
    objectId: string | null
    keyId: string | null
    creator: string | null
    itemId: string | null
    deleted: boolean | null
  }

  export type LockedCountAggregateOutputType = {
    id: number
    objectId: number
    keyId: number
    creator: number
    itemId: number
    deleted: number
    _all: number
  }


  export type LockedAvgAggregateInputType = {
    id?: true
  }

  export type LockedSumAggregateInputType = {
    id?: true
  }

  export type LockedMinAggregateInputType = {
    id?: true
    objectId?: true
    keyId?: true
    creator?: true
    itemId?: true
    deleted?: true
  }

  export type LockedMaxAggregateInputType = {
    id?: true
    objectId?: true
    keyId?: true
    creator?: true
    itemId?: true
    deleted?: true
  }

  export type LockedCountAggregateInputType = {
    id?: true
    objectId?: true
    keyId?: true
    creator?: true
    itemId?: true
    deleted?: true
    _all?: true
  }

  export type LockedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locked to aggregate.
     */
    where?: LockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lockeds to fetch.
     */
    orderBy?: LockedOrderByWithRelationInput | LockedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lockeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lockeds
    **/
    _count?: true | LockedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LockedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LockedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LockedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LockedMaxAggregateInputType
  }

  export type GetLockedAggregateType<T extends LockedAggregateArgs> = {
        [P in keyof T & keyof AggregateLocked]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocked[P]>
      : GetScalarType<T[P], AggregateLocked[P]>
  }




  export type LockedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LockedWhereInput
    orderBy?: LockedOrderByWithAggregationInput | LockedOrderByWithAggregationInput[]
    by: LockedScalarFieldEnum[] | LockedScalarFieldEnum
    having?: LockedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LockedCountAggregateInputType | true
    _avg?: LockedAvgAggregateInputType
    _sum?: LockedSumAggregateInputType
    _min?: LockedMinAggregateInputType
    _max?: LockedMaxAggregateInputType
  }

  export type LockedGroupByOutputType = {
    id: number
    objectId: string
    keyId: string | null
    creator: string | null
    itemId: string | null
    deleted: boolean
    _count: LockedCountAggregateOutputType | null
    _avg: LockedAvgAggregateOutputType | null
    _sum: LockedSumAggregateOutputType | null
    _min: LockedMinAggregateOutputType | null
    _max: LockedMaxAggregateOutputType | null
  }

  type GetLockedGroupByPayload<T extends LockedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LockedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LockedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LockedGroupByOutputType[P]>
            : GetScalarType<T[P], LockedGroupByOutputType[P]>
        }
      >
    >


  export type LockedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objectId?: boolean
    keyId?: boolean
    creator?: boolean
    itemId?: boolean
    deleted?: boolean
  }, ExtArgs["result"]["locked"]>

  export type LockedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objectId?: boolean
    keyId?: boolean
    creator?: boolean
    itemId?: boolean
    deleted?: boolean
  }, ExtArgs["result"]["locked"]>

  export type LockedSelectScalar = {
    id?: boolean
    objectId?: boolean
    keyId?: boolean
    creator?: boolean
    itemId?: boolean
    deleted?: boolean
  }


  export type $LockedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Locked"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      objectId: string
      keyId: string | null
      creator: string | null
      itemId: string | null
      deleted: boolean
    }, ExtArgs["result"]["locked"]>
    composites: {}
  }

  type LockedGetPayload<S extends boolean | null | undefined | LockedDefaultArgs> = $Result.GetResult<Prisma.$LockedPayload, S>

  type LockedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LockedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LockedCountAggregateInputType | true
    }

  export interface LockedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Locked'], meta: { name: 'Locked' } }
    /**
     * Find zero or one Locked that matches the filter.
     * @param {LockedFindUniqueArgs} args - Arguments to find a Locked
     * @example
     * // Get one Locked
     * const locked = await prisma.locked.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LockedFindUniqueArgs>(args: SelectSubset<T, LockedFindUniqueArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Locked that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LockedFindUniqueOrThrowArgs} args - Arguments to find a Locked
     * @example
     * // Get one Locked
     * const locked = await prisma.locked.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LockedFindUniqueOrThrowArgs>(args: SelectSubset<T, LockedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Locked that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedFindFirstArgs} args - Arguments to find a Locked
     * @example
     * // Get one Locked
     * const locked = await prisma.locked.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LockedFindFirstArgs>(args?: SelectSubset<T, LockedFindFirstArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Locked that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedFindFirstOrThrowArgs} args - Arguments to find a Locked
     * @example
     * // Get one Locked
     * const locked = await prisma.locked.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LockedFindFirstOrThrowArgs>(args?: SelectSubset<T, LockedFindFirstOrThrowArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Lockeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lockeds
     * const lockeds = await prisma.locked.findMany()
     * 
     * // Get first 10 Lockeds
     * const lockeds = await prisma.locked.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lockedWithIdOnly = await prisma.locked.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LockedFindManyArgs>(args?: SelectSubset<T, LockedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Locked.
     * @param {LockedCreateArgs} args - Arguments to create a Locked.
     * @example
     * // Create one Locked
     * const Locked = await prisma.locked.create({
     *   data: {
     *     // ... data to create a Locked
     *   }
     * })
     * 
     */
    create<T extends LockedCreateArgs>(args: SelectSubset<T, LockedCreateArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Lockeds.
     * @param {LockedCreateManyArgs} args - Arguments to create many Lockeds.
     * @example
     * // Create many Lockeds
     * const locked = await prisma.locked.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LockedCreateManyArgs>(args?: SelectSubset<T, LockedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lockeds and returns the data saved in the database.
     * @param {LockedCreateManyAndReturnArgs} args - Arguments to create many Lockeds.
     * @example
     * // Create many Lockeds
     * const locked = await prisma.locked.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lockeds and only return the `id`
     * const lockedWithIdOnly = await prisma.locked.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LockedCreateManyAndReturnArgs>(args?: SelectSubset<T, LockedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Locked.
     * @param {LockedDeleteArgs} args - Arguments to delete one Locked.
     * @example
     * // Delete one Locked
     * const Locked = await prisma.locked.delete({
     *   where: {
     *     // ... filter to delete one Locked
     *   }
     * })
     * 
     */
    delete<T extends LockedDeleteArgs>(args: SelectSubset<T, LockedDeleteArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Locked.
     * @param {LockedUpdateArgs} args - Arguments to update one Locked.
     * @example
     * // Update one Locked
     * const locked = await prisma.locked.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LockedUpdateArgs>(args: SelectSubset<T, LockedUpdateArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Lockeds.
     * @param {LockedDeleteManyArgs} args - Arguments to filter Lockeds to delete.
     * @example
     * // Delete a few Lockeds
     * const { count } = await prisma.locked.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LockedDeleteManyArgs>(args?: SelectSubset<T, LockedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lockeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lockeds
     * const locked = await prisma.locked.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LockedUpdateManyArgs>(args: SelectSubset<T, LockedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Locked.
     * @param {LockedUpsertArgs} args - Arguments to update or create a Locked.
     * @example
     * // Update or create a Locked
     * const locked = await prisma.locked.upsert({
     *   create: {
     *     // ... data to create a Locked
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Locked we want to update
     *   }
     * })
     */
    upsert<T extends LockedUpsertArgs>(args: SelectSubset<T, LockedUpsertArgs<ExtArgs>>): Prisma__LockedClient<$Result.GetResult<Prisma.$LockedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Lockeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedCountArgs} args - Arguments to filter Lockeds to count.
     * @example
     * // Count the number of Lockeds
     * const count = await prisma.locked.count({
     *   where: {
     *     // ... the filter for the Lockeds we want to count
     *   }
     * })
    **/
    count<T extends LockedCountArgs>(
      args?: Subset<T, LockedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LockedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Locked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LockedAggregateArgs>(args: Subset<T, LockedAggregateArgs>): Prisma.PrismaPromise<GetLockedAggregateType<T>>

    /**
     * Group by Locked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LockedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LockedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LockedGroupByArgs['orderBy'] }
        : { orderBy?: LockedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LockedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLockedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Locked model
   */
  readonly fields: LockedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Locked.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LockedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Locked model
   */ 
  interface LockedFieldRefs {
    readonly id: FieldRef<"Locked", 'Int'>
    readonly objectId: FieldRef<"Locked", 'String'>
    readonly keyId: FieldRef<"Locked", 'String'>
    readonly creator: FieldRef<"Locked", 'String'>
    readonly itemId: FieldRef<"Locked", 'String'>
    readonly deleted: FieldRef<"Locked", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Locked findUnique
   */
  export type LockedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * Filter, which Locked to fetch.
     */
    where: LockedWhereUniqueInput
  }

  /**
   * Locked findUniqueOrThrow
   */
  export type LockedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * Filter, which Locked to fetch.
     */
    where: LockedWhereUniqueInput
  }

  /**
   * Locked findFirst
   */
  export type LockedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * Filter, which Locked to fetch.
     */
    where?: LockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lockeds to fetch.
     */
    orderBy?: LockedOrderByWithRelationInput | LockedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lockeds.
     */
    cursor?: LockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lockeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lockeds.
     */
    distinct?: LockedScalarFieldEnum | LockedScalarFieldEnum[]
  }

  /**
   * Locked findFirstOrThrow
   */
  export type LockedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * Filter, which Locked to fetch.
     */
    where?: LockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lockeds to fetch.
     */
    orderBy?: LockedOrderByWithRelationInput | LockedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lockeds.
     */
    cursor?: LockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lockeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lockeds.
     */
    distinct?: LockedScalarFieldEnum | LockedScalarFieldEnum[]
  }

  /**
   * Locked findMany
   */
  export type LockedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * Filter, which Lockeds to fetch.
     */
    where?: LockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lockeds to fetch.
     */
    orderBy?: LockedOrderByWithRelationInput | LockedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lockeds.
     */
    cursor?: LockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lockeds.
     */
    skip?: number
    distinct?: LockedScalarFieldEnum | LockedScalarFieldEnum[]
  }

  /**
   * Locked create
   */
  export type LockedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * The data needed to create a Locked.
     */
    data: XOR<LockedCreateInput, LockedUncheckedCreateInput>
  }

  /**
   * Locked createMany
   */
  export type LockedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lockeds.
     */
    data: LockedCreateManyInput | LockedCreateManyInput[]
  }

  /**
   * Locked createManyAndReturn
   */
  export type LockedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Lockeds.
     */
    data: LockedCreateManyInput | LockedCreateManyInput[]
  }

  /**
   * Locked update
   */
  export type LockedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * The data needed to update a Locked.
     */
    data: XOR<LockedUpdateInput, LockedUncheckedUpdateInput>
    /**
     * Choose, which Locked to update.
     */
    where: LockedWhereUniqueInput
  }

  /**
   * Locked updateMany
   */
  export type LockedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lockeds.
     */
    data: XOR<LockedUpdateManyMutationInput, LockedUncheckedUpdateManyInput>
    /**
     * Filter which Lockeds to update
     */
    where?: LockedWhereInput
  }

  /**
   * Locked upsert
   */
  export type LockedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * The filter to search for the Locked to update in case it exists.
     */
    where: LockedWhereUniqueInput
    /**
     * In case the Locked found by the `where` argument doesn't exist, create a new Locked with this data.
     */
    create: XOR<LockedCreateInput, LockedUncheckedCreateInput>
    /**
     * In case the Locked was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LockedUpdateInput, LockedUncheckedUpdateInput>
  }

  /**
   * Locked delete
   */
  export type LockedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
    /**
     * Filter which Locked to delete.
     */
    where: LockedWhereUniqueInput
  }

  /**
   * Locked deleteMany
   */
  export type LockedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lockeds to delete
     */
    where?: LockedWhereInput
  }

  /**
   * Locked without action
   */
  export type LockedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Locked
     */
    select?: LockedSelect<ExtArgs> | null
  }


  /**
   * Model Escrow
   */

  export type AggregateEscrow = {
    _count: EscrowCountAggregateOutputType | null
    _avg: EscrowAvgAggregateOutputType | null
    _sum: EscrowSumAggregateOutputType | null
    _min: EscrowMinAggregateOutputType | null
    _max: EscrowMaxAggregateOutputType | null
  }

  export type EscrowAvgAggregateOutputType = {
    id: number | null
  }

  export type EscrowSumAggregateOutputType = {
    id: number | null
  }

  export type EscrowMinAggregateOutputType = {
    id: number | null
    objectId: string | null
    sender: string | null
    recipient: string | null
    keyId: string | null
    itemId: string | null
    swapped: boolean | null
    cancelled: boolean | null
  }

  export type EscrowMaxAggregateOutputType = {
    id: number | null
    objectId: string | null
    sender: string | null
    recipient: string | null
    keyId: string | null
    itemId: string | null
    swapped: boolean | null
    cancelled: boolean | null
  }

  export type EscrowCountAggregateOutputType = {
    id: number
    objectId: number
    sender: number
    recipient: number
    keyId: number
    itemId: number
    swapped: number
    cancelled: number
    _all: number
  }


  export type EscrowAvgAggregateInputType = {
    id?: true
  }

  export type EscrowSumAggregateInputType = {
    id?: true
  }

  export type EscrowMinAggregateInputType = {
    id?: true
    objectId?: true
    sender?: true
    recipient?: true
    keyId?: true
    itemId?: true
    swapped?: true
    cancelled?: true
  }

  export type EscrowMaxAggregateInputType = {
    id?: true
    objectId?: true
    sender?: true
    recipient?: true
    keyId?: true
    itemId?: true
    swapped?: true
    cancelled?: true
  }

  export type EscrowCountAggregateInputType = {
    id?: true
    objectId?: true
    sender?: true
    recipient?: true
    keyId?: true
    itemId?: true
    swapped?: true
    cancelled?: true
    _all?: true
  }

  export type EscrowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Escrow to aggregate.
     */
    where?: EscrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escrows to fetch.
     */
    orderBy?: EscrowOrderByWithRelationInput | EscrowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EscrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escrows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escrows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Escrows
    **/
    _count?: true | EscrowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EscrowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EscrowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EscrowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EscrowMaxAggregateInputType
  }

  export type GetEscrowAggregateType<T extends EscrowAggregateArgs> = {
        [P in keyof T & keyof AggregateEscrow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEscrow[P]>
      : GetScalarType<T[P], AggregateEscrow[P]>
  }




  export type EscrowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EscrowWhereInput
    orderBy?: EscrowOrderByWithAggregationInput | EscrowOrderByWithAggregationInput[]
    by: EscrowScalarFieldEnum[] | EscrowScalarFieldEnum
    having?: EscrowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EscrowCountAggregateInputType | true
    _avg?: EscrowAvgAggregateInputType
    _sum?: EscrowSumAggregateInputType
    _min?: EscrowMinAggregateInputType
    _max?: EscrowMaxAggregateInputType
  }

  export type EscrowGroupByOutputType = {
    id: number
    objectId: string
    sender: string | null
    recipient: string | null
    keyId: string | null
    itemId: string | null
    swapped: boolean
    cancelled: boolean
    _count: EscrowCountAggregateOutputType | null
    _avg: EscrowAvgAggregateOutputType | null
    _sum: EscrowSumAggregateOutputType | null
    _min: EscrowMinAggregateOutputType | null
    _max: EscrowMaxAggregateOutputType | null
  }

  type GetEscrowGroupByPayload<T extends EscrowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EscrowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EscrowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EscrowGroupByOutputType[P]>
            : GetScalarType<T[P], EscrowGroupByOutputType[P]>
        }
      >
    >


  export type EscrowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objectId?: boolean
    sender?: boolean
    recipient?: boolean
    keyId?: boolean
    itemId?: boolean
    swapped?: boolean
    cancelled?: boolean
  }, ExtArgs["result"]["escrow"]>

  export type EscrowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objectId?: boolean
    sender?: boolean
    recipient?: boolean
    keyId?: boolean
    itemId?: boolean
    swapped?: boolean
    cancelled?: boolean
  }, ExtArgs["result"]["escrow"]>

  export type EscrowSelectScalar = {
    id?: boolean
    objectId?: boolean
    sender?: boolean
    recipient?: boolean
    keyId?: boolean
    itemId?: boolean
    swapped?: boolean
    cancelled?: boolean
  }


  export type $EscrowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Escrow"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      objectId: string
      sender: string | null
      recipient: string | null
      keyId: string | null
      itemId: string | null
      swapped: boolean
      cancelled: boolean
    }, ExtArgs["result"]["escrow"]>
    composites: {}
  }

  type EscrowGetPayload<S extends boolean | null | undefined | EscrowDefaultArgs> = $Result.GetResult<Prisma.$EscrowPayload, S>

  type EscrowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EscrowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EscrowCountAggregateInputType | true
    }

  export interface EscrowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Escrow'], meta: { name: 'Escrow' } }
    /**
     * Find zero or one Escrow that matches the filter.
     * @param {EscrowFindUniqueArgs} args - Arguments to find a Escrow
     * @example
     * // Get one Escrow
     * const escrow = await prisma.escrow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EscrowFindUniqueArgs>(args: SelectSubset<T, EscrowFindUniqueArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Escrow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EscrowFindUniqueOrThrowArgs} args - Arguments to find a Escrow
     * @example
     * // Get one Escrow
     * const escrow = await prisma.escrow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EscrowFindUniqueOrThrowArgs>(args: SelectSubset<T, EscrowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Escrow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowFindFirstArgs} args - Arguments to find a Escrow
     * @example
     * // Get one Escrow
     * const escrow = await prisma.escrow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EscrowFindFirstArgs>(args?: SelectSubset<T, EscrowFindFirstArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Escrow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowFindFirstOrThrowArgs} args - Arguments to find a Escrow
     * @example
     * // Get one Escrow
     * const escrow = await prisma.escrow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EscrowFindFirstOrThrowArgs>(args?: SelectSubset<T, EscrowFindFirstOrThrowArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Escrows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Escrows
     * const escrows = await prisma.escrow.findMany()
     * 
     * // Get first 10 Escrows
     * const escrows = await prisma.escrow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const escrowWithIdOnly = await prisma.escrow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EscrowFindManyArgs>(args?: SelectSubset<T, EscrowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Escrow.
     * @param {EscrowCreateArgs} args - Arguments to create a Escrow.
     * @example
     * // Create one Escrow
     * const Escrow = await prisma.escrow.create({
     *   data: {
     *     // ... data to create a Escrow
     *   }
     * })
     * 
     */
    create<T extends EscrowCreateArgs>(args: SelectSubset<T, EscrowCreateArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Escrows.
     * @param {EscrowCreateManyArgs} args - Arguments to create many Escrows.
     * @example
     * // Create many Escrows
     * const escrow = await prisma.escrow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EscrowCreateManyArgs>(args?: SelectSubset<T, EscrowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Escrows and returns the data saved in the database.
     * @param {EscrowCreateManyAndReturnArgs} args - Arguments to create many Escrows.
     * @example
     * // Create many Escrows
     * const escrow = await prisma.escrow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Escrows and only return the `id`
     * const escrowWithIdOnly = await prisma.escrow.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EscrowCreateManyAndReturnArgs>(args?: SelectSubset<T, EscrowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Escrow.
     * @param {EscrowDeleteArgs} args - Arguments to delete one Escrow.
     * @example
     * // Delete one Escrow
     * const Escrow = await prisma.escrow.delete({
     *   where: {
     *     // ... filter to delete one Escrow
     *   }
     * })
     * 
     */
    delete<T extends EscrowDeleteArgs>(args: SelectSubset<T, EscrowDeleteArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Escrow.
     * @param {EscrowUpdateArgs} args - Arguments to update one Escrow.
     * @example
     * // Update one Escrow
     * const escrow = await prisma.escrow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EscrowUpdateArgs>(args: SelectSubset<T, EscrowUpdateArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Escrows.
     * @param {EscrowDeleteManyArgs} args - Arguments to filter Escrows to delete.
     * @example
     * // Delete a few Escrows
     * const { count } = await prisma.escrow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EscrowDeleteManyArgs>(args?: SelectSubset<T, EscrowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Escrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Escrows
     * const escrow = await prisma.escrow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EscrowUpdateManyArgs>(args: SelectSubset<T, EscrowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Escrow.
     * @param {EscrowUpsertArgs} args - Arguments to update or create a Escrow.
     * @example
     * // Update or create a Escrow
     * const escrow = await prisma.escrow.upsert({
     *   create: {
     *     // ... data to create a Escrow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Escrow we want to update
     *   }
     * })
     */
    upsert<T extends EscrowUpsertArgs>(args: SelectSubset<T, EscrowUpsertArgs<ExtArgs>>): Prisma__EscrowClient<$Result.GetResult<Prisma.$EscrowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Escrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowCountArgs} args - Arguments to filter Escrows to count.
     * @example
     * // Count the number of Escrows
     * const count = await prisma.escrow.count({
     *   where: {
     *     // ... the filter for the Escrows we want to count
     *   }
     * })
    **/
    count<T extends EscrowCountArgs>(
      args?: Subset<T, EscrowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EscrowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Escrow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EscrowAggregateArgs>(args: Subset<T, EscrowAggregateArgs>): Prisma.PrismaPromise<GetEscrowAggregateType<T>>

    /**
     * Group by Escrow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscrowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EscrowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EscrowGroupByArgs['orderBy'] }
        : { orderBy?: EscrowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EscrowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEscrowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Escrow model
   */
  readonly fields: EscrowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Escrow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EscrowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Escrow model
   */ 
  interface EscrowFieldRefs {
    readonly id: FieldRef<"Escrow", 'Int'>
    readonly objectId: FieldRef<"Escrow", 'String'>
    readonly sender: FieldRef<"Escrow", 'String'>
    readonly recipient: FieldRef<"Escrow", 'String'>
    readonly keyId: FieldRef<"Escrow", 'String'>
    readonly itemId: FieldRef<"Escrow", 'String'>
    readonly swapped: FieldRef<"Escrow", 'Boolean'>
    readonly cancelled: FieldRef<"Escrow", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Escrow findUnique
   */
  export type EscrowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * Filter, which Escrow to fetch.
     */
    where: EscrowWhereUniqueInput
  }

  /**
   * Escrow findUniqueOrThrow
   */
  export type EscrowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * Filter, which Escrow to fetch.
     */
    where: EscrowWhereUniqueInput
  }

  /**
   * Escrow findFirst
   */
  export type EscrowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * Filter, which Escrow to fetch.
     */
    where?: EscrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escrows to fetch.
     */
    orderBy?: EscrowOrderByWithRelationInput | EscrowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Escrows.
     */
    cursor?: EscrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escrows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escrows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Escrows.
     */
    distinct?: EscrowScalarFieldEnum | EscrowScalarFieldEnum[]
  }

  /**
   * Escrow findFirstOrThrow
   */
  export type EscrowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * Filter, which Escrow to fetch.
     */
    where?: EscrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escrows to fetch.
     */
    orderBy?: EscrowOrderByWithRelationInput | EscrowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Escrows.
     */
    cursor?: EscrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escrows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escrows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Escrows.
     */
    distinct?: EscrowScalarFieldEnum | EscrowScalarFieldEnum[]
  }

  /**
   * Escrow findMany
   */
  export type EscrowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * Filter, which Escrows to fetch.
     */
    where?: EscrowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escrows to fetch.
     */
    orderBy?: EscrowOrderByWithRelationInput | EscrowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Escrows.
     */
    cursor?: EscrowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escrows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escrows.
     */
    skip?: number
    distinct?: EscrowScalarFieldEnum | EscrowScalarFieldEnum[]
  }

  /**
   * Escrow create
   */
  export type EscrowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * The data needed to create a Escrow.
     */
    data: XOR<EscrowCreateInput, EscrowUncheckedCreateInput>
  }

  /**
   * Escrow createMany
   */
  export type EscrowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Escrows.
     */
    data: EscrowCreateManyInput | EscrowCreateManyInput[]
  }

  /**
   * Escrow createManyAndReturn
   */
  export type EscrowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Escrows.
     */
    data: EscrowCreateManyInput | EscrowCreateManyInput[]
  }

  /**
   * Escrow update
   */
  export type EscrowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * The data needed to update a Escrow.
     */
    data: XOR<EscrowUpdateInput, EscrowUncheckedUpdateInput>
    /**
     * Choose, which Escrow to update.
     */
    where: EscrowWhereUniqueInput
  }

  /**
   * Escrow updateMany
   */
  export type EscrowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Escrows.
     */
    data: XOR<EscrowUpdateManyMutationInput, EscrowUncheckedUpdateManyInput>
    /**
     * Filter which Escrows to update
     */
    where?: EscrowWhereInput
  }

  /**
   * Escrow upsert
   */
  export type EscrowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * The filter to search for the Escrow to update in case it exists.
     */
    where: EscrowWhereUniqueInput
    /**
     * In case the Escrow found by the `where` argument doesn't exist, create a new Escrow with this data.
     */
    create: XOR<EscrowCreateInput, EscrowUncheckedCreateInput>
    /**
     * In case the Escrow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EscrowUpdateInput, EscrowUncheckedUpdateInput>
  }

  /**
   * Escrow delete
   */
  export type EscrowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
    /**
     * Filter which Escrow to delete.
     */
    where: EscrowWhereUniqueInput
  }

  /**
   * Escrow deleteMany
   */
  export type EscrowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Escrows to delete
     */
    where?: EscrowWhereInput
  }

  /**
   * Escrow without action
   */
  export type EscrowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escrow
     */
    select?: EscrowSelect<ExtArgs> | null
  }


  /**
   * Model Cursor
   */

  export type AggregateCursor = {
    _count: CursorCountAggregateOutputType | null
    _min: CursorMinAggregateOutputType | null
    _max: CursorMaxAggregateOutputType | null
  }

  export type CursorMinAggregateOutputType = {
    id: string | null
    eventSeq: string | null
    txDigest: string | null
  }

  export type CursorMaxAggregateOutputType = {
    id: string | null
    eventSeq: string | null
    txDigest: string | null
  }

  export type CursorCountAggregateOutputType = {
    id: number
    eventSeq: number
    txDigest: number
    _all: number
  }


  export type CursorMinAggregateInputType = {
    id?: true
    eventSeq?: true
    txDigest?: true
  }

  export type CursorMaxAggregateInputType = {
    id?: true
    eventSeq?: true
    txDigest?: true
  }

  export type CursorCountAggregateInputType = {
    id?: true
    eventSeq?: true
    txDigest?: true
    _all?: true
  }

  export type CursorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cursor to aggregate.
     */
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     */
    orderBy?: CursorOrderByWithRelationInput | CursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cursors
    **/
    _count?: true | CursorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursorMaxAggregateInputType
  }

  export type GetCursorAggregateType<T extends CursorAggregateArgs> = {
        [P in keyof T & keyof AggregateCursor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCursor[P]>
      : GetScalarType<T[P], AggregateCursor[P]>
  }




  export type CursorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CursorWhereInput
    orderBy?: CursorOrderByWithAggregationInput | CursorOrderByWithAggregationInput[]
    by: CursorScalarFieldEnum[] | CursorScalarFieldEnum
    having?: CursorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursorCountAggregateInputType | true
    _min?: CursorMinAggregateInputType
    _max?: CursorMaxAggregateInputType
  }

  export type CursorGroupByOutputType = {
    id: string
    eventSeq: string
    txDigest: string
    _count: CursorCountAggregateOutputType | null
    _min: CursorMinAggregateOutputType | null
    _max: CursorMaxAggregateOutputType | null
  }

  type GetCursorGroupByPayload<T extends CursorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursorGroupByOutputType[P]>
            : GetScalarType<T[P], CursorGroupByOutputType[P]>
        }
      >
    >


  export type CursorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventSeq?: boolean
    txDigest?: boolean
  }, ExtArgs["result"]["cursor"]>

  export type CursorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventSeq?: boolean
    txDigest?: boolean
  }, ExtArgs["result"]["cursor"]>

  export type CursorSelectScalar = {
    id?: boolean
    eventSeq?: boolean
    txDigest?: boolean
  }


  export type $CursorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cursor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventSeq: string
      txDigest: string
    }, ExtArgs["result"]["cursor"]>
    composites: {}
  }

  type CursorGetPayload<S extends boolean | null | undefined | CursorDefaultArgs> = $Result.GetResult<Prisma.$CursorPayload, S>

  type CursorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CursorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CursorCountAggregateInputType | true
    }

  export interface CursorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cursor'], meta: { name: 'Cursor' } }
    /**
     * Find zero or one Cursor that matches the filter.
     * @param {CursorFindUniqueArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CursorFindUniqueArgs>(args: SelectSubset<T, CursorFindUniqueArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cursor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CursorFindUniqueOrThrowArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CursorFindUniqueOrThrowArgs>(args: SelectSubset<T, CursorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cursor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorFindFirstArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CursorFindFirstArgs>(args?: SelectSubset<T, CursorFindFirstArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cursor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorFindFirstOrThrowArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CursorFindFirstOrThrowArgs>(args?: SelectSubset<T, CursorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cursors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursors
     * const cursors = await prisma.cursor.findMany()
     * 
     * // Get first 10 Cursors
     * const cursors = await prisma.cursor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursorWithIdOnly = await prisma.cursor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CursorFindManyArgs>(args?: SelectSubset<T, CursorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cursor.
     * @param {CursorCreateArgs} args - Arguments to create a Cursor.
     * @example
     * // Create one Cursor
     * const Cursor = await prisma.cursor.create({
     *   data: {
     *     // ... data to create a Cursor
     *   }
     * })
     * 
     */
    create<T extends CursorCreateArgs>(args: SelectSubset<T, CursorCreateArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cursors.
     * @param {CursorCreateManyArgs} args - Arguments to create many Cursors.
     * @example
     * // Create many Cursors
     * const cursor = await prisma.cursor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CursorCreateManyArgs>(args?: SelectSubset<T, CursorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cursors and returns the data saved in the database.
     * @param {CursorCreateManyAndReturnArgs} args - Arguments to create many Cursors.
     * @example
     * // Create many Cursors
     * const cursor = await prisma.cursor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cursors and only return the `id`
     * const cursorWithIdOnly = await prisma.cursor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CursorCreateManyAndReturnArgs>(args?: SelectSubset<T, CursorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cursor.
     * @param {CursorDeleteArgs} args - Arguments to delete one Cursor.
     * @example
     * // Delete one Cursor
     * const Cursor = await prisma.cursor.delete({
     *   where: {
     *     // ... filter to delete one Cursor
     *   }
     * })
     * 
     */
    delete<T extends CursorDeleteArgs>(args: SelectSubset<T, CursorDeleteArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cursor.
     * @param {CursorUpdateArgs} args - Arguments to update one Cursor.
     * @example
     * // Update one Cursor
     * const cursor = await prisma.cursor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CursorUpdateArgs>(args: SelectSubset<T, CursorUpdateArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cursors.
     * @param {CursorDeleteManyArgs} args - Arguments to filter Cursors to delete.
     * @example
     * // Delete a few Cursors
     * const { count } = await prisma.cursor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CursorDeleteManyArgs>(args?: SelectSubset<T, CursorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursors
     * const cursor = await prisma.cursor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CursorUpdateManyArgs>(args: SelectSubset<T, CursorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cursor.
     * @param {CursorUpsertArgs} args - Arguments to update or create a Cursor.
     * @example
     * // Update or create a Cursor
     * const cursor = await prisma.cursor.upsert({
     *   create: {
     *     // ... data to create a Cursor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cursor we want to update
     *   }
     * })
     */
    upsert<T extends CursorUpsertArgs>(args: SelectSubset<T, CursorUpsertArgs<ExtArgs>>): Prisma__CursorClient<$Result.GetResult<Prisma.$CursorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorCountArgs} args - Arguments to filter Cursors to count.
     * @example
     * // Count the number of Cursors
     * const count = await prisma.cursor.count({
     *   where: {
     *     // ... the filter for the Cursors we want to count
     *   }
     * })
    **/
    count<T extends CursorCountArgs>(
      args?: Subset<T, CursorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursorAggregateArgs>(args: Subset<T, CursorAggregateArgs>): Prisma.PrismaPromise<GetCursorAggregateType<T>>

    /**
     * Group by Cursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursorGroupByArgs['orderBy'] }
        : { orderBy?: CursorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cursor model
   */
  readonly fields: CursorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cursor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CursorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cursor model
   */ 
  interface CursorFieldRefs {
    readonly id: FieldRef<"Cursor", 'String'>
    readonly eventSeq: FieldRef<"Cursor", 'String'>
    readonly txDigest: FieldRef<"Cursor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cursor findUnique
   */
  export type CursorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * Filter, which Cursor to fetch.
     */
    where: CursorWhereUniqueInput
  }

  /**
   * Cursor findUniqueOrThrow
   */
  export type CursorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * Filter, which Cursor to fetch.
     */
    where: CursorWhereUniqueInput
  }

  /**
   * Cursor findFirst
   */
  export type CursorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * Filter, which Cursor to fetch.
     */
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     */
    orderBy?: CursorOrderByWithRelationInput | CursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursors.
     */
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursors.
     */
    distinct?: CursorScalarFieldEnum | CursorScalarFieldEnum[]
  }

  /**
   * Cursor findFirstOrThrow
   */
  export type CursorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * Filter, which Cursor to fetch.
     */
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     */
    orderBy?: CursorOrderByWithRelationInput | CursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursors.
     */
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursors.
     */
    distinct?: CursorScalarFieldEnum | CursorScalarFieldEnum[]
  }

  /**
   * Cursor findMany
   */
  export type CursorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * Filter, which Cursors to fetch.
     */
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     */
    orderBy?: CursorOrderByWithRelationInput | CursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cursors.
     */
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     */
    skip?: number
    distinct?: CursorScalarFieldEnum | CursorScalarFieldEnum[]
  }

  /**
   * Cursor create
   */
  export type CursorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * The data needed to create a Cursor.
     */
    data: XOR<CursorCreateInput, CursorUncheckedCreateInput>
  }

  /**
   * Cursor createMany
   */
  export type CursorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cursors.
     */
    data: CursorCreateManyInput | CursorCreateManyInput[]
  }

  /**
   * Cursor createManyAndReturn
   */
  export type CursorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cursors.
     */
    data: CursorCreateManyInput | CursorCreateManyInput[]
  }

  /**
   * Cursor update
   */
  export type CursorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * The data needed to update a Cursor.
     */
    data: XOR<CursorUpdateInput, CursorUncheckedUpdateInput>
    /**
     * Choose, which Cursor to update.
     */
    where: CursorWhereUniqueInput
  }

  /**
   * Cursor updateMany
   */
  export type CursorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cursors.
     */
    data: XOR<CursorUpdateManyMutationInput, CursorUncheckedUpdateManyInput>
    /**
     * Filter which Cursors to update
     */
    where?: CursorWhereInput
  }

  /**
   * Cursor upsert
   */
  export type CursorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * The filter to search for the Cursor to update in case it exists.
     */
    where: CursorWhereUniqueInput
    /**
     * In case the Cursor found by the `where` argument doesn't exist, create a new Cursor with this data.
     */
    create: XOR<CursorCreateInput, CursorUncheckedCreateInput>
    /**
     * In case the Cursor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CursorUpdateInput, CursorUncheckedUpdateInput>
  }

  /**
   * Cursor delete
   */
  export type CursorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
    /**
     * Filter which Cursor to delete.
     */
    where: CursorWhereUniqueInput
  }

  /**
   * Cursor deleteMany
   */
  export type CursorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cursors to delete
     */
    where?: CursorWhereInput
  }

  /**
   * Cursor without action
   */
  export type CursorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cursor
     */
    select?: CursorSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LockedScalarFieldEnum: {
    id: 'id',
    objectId: 'objectId',
    keyId: 'keyId',
    creator: 'creator',
    itemId: 'itemId',
    deleted: 'deleted'
  };

  export type LockedScalarFieldEnum = (typeof LockedScalarFieldEnum)[keyof typeof LockedScalarFieldEnum]


  export const EscrowScalarFieldEnum: {
    id: 'id',
    objectId: 'objectId',
    sender: 'sender',
    recipient: 'recipient',
    keyId: 'keyId',
    itemId: 'itemId',
    swapped: 'swapped',
    cancelled: 'cancelled'
  };

  export type EscrowScalarFieldEnum = (typeof EscrowScalarFieldEnum)[keyof typeof EscrowScalarFieldEnum]


  export const CursorScalarFieldEnum: {
    id: 'id',
    eventSeq: 'eventSeq',
    txDigest: 'txDigest'
  };

  export type CursorScalarFieldEnum = (typeof CursorScalarFieldEnum)[keyof typeof CursorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type LockedWhereInput = {
    AND?: LockedWhereInput | LockedWhereInput[]
    OR?: LockedWhereInput[]
    NOT?: LockedWhereInput | LockedWhereInput[]
    id?: IntFilter<"Locked"> | number
    objectId?: StringFilter<"Locked"> | string
    keyId?: StringNullableFilter<"Locked"> | string | null
    creator?: StringNullableFilter<"Locked"> | string | null
    itemId?: StringNullableFilter<"Locked"> | string | null
    deleted?: BoolFilter<"Locked"> | boolean
  }

  export type LockedOrderByWithRelationInput = {
    id?: SortOrder
    objectId?: SortOrder
    keyId?: SortOrderInput | SortOrder
    creator?: SortOrderInput | SortOrder
    itemId?: SortOrderInput | SortOrder
    deleted?: SortOrder
  }

  export type LockedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    objectId?: string
    AND?: LockedWhereInput | LockedWhereInput[]
    OR?: LockedWhereInput[]
    NOT?: LockedWhereInput | LockedWhereInput[]
    keyId?: StringNullableFilter<"Locked"> | string | null
    creator?: StringNullableFilter<"Locked"> | string | null
    itemId?: StringNullableFilter<"Locked"> | string | null
    deleted?: BoolFilter<"Locked"> | boolean
  }, "id" | "objectId">

  export type LockedOrderByWithAggregationInput = {
    id?: SortOrder
    objectId?: SortOrder
    keyId?: SortOrderInput | SortOrder
    creator?: SortOrderInput | SortOrder
    itemId?: SortOrderInput | SortOrder
    deleted?: SortOrder
    _count?: LockedCountOrderByAggregateInput
    _avg?: LockedAvgOrderByAggregateInput
    _max?: LockedMaxOrderByAggregateInput
    _min?: LockedMinOrderByAggregateInput
    _sum?: LockedSumOrderByAggregateInput
  }

  export type LockedScalarWhereWithAggregatesInput = {
    AND?: LockedScalarWhereWithAggregatesInput | LockedScalarWhereWithAggregatesInput[]
    OR?: LockedScalarWhereWithAggregatesInput[]
    NOT?: LockedScalarWhereWithAggregatesInput | LockedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Locked"> | number
    objectId?: StringWithAggregatesFilter<"Locked"> | string
    keyId?: StringNullableWithAggregatesFilter<"Locked"> | string | null
    creator?: StringNullableWithAggregatesFilter<"Locked"> | string | null
    itemId?: StringNullableWithAggregatesFilter<"Locked"> | string | null
    deleted?: BoolWithAggregatesFilter<"Locked"> | boolean
  }

  export type EscrowWhereInput = {
    AND?: EscrowWhereInput | EscrowWhereInput[]
    OR?: EscrowWhereInput[]
    NOT?: EscrowWhereInput | EscrowWhereInput[]
    id?: IntFilter<"Escrow"> | number
    objectId?: StringFilter<"Escrow"> | string
    sender?: StringNullableFilter<"Escrow"> | string | null
    recipient?: StringNullableFilter<"Escrow"> | string | null
    keyId?: StringNullableFilter<"Escrow"> | string | null
    itemId?: StringNullableFilter<"Escrow"> | string | null
    swapped?: BoolFilter<"Escrow"> | boolean
    cancelled?: BoolFilter<"Escrow"> | boolean
  }

  export type EscrowOrderByWithRelationInput = {
    id?: SortOrder
    objectId?: SortOrder
    sender?: SortOrderInput | SortOrder
    recipient?: SortOrderInput | SortOrder
    keyId?: SortOrderInput | SortOrder
    itemId?: SortOrderInput | SortOrder
    swapped?: SortOrder
    cancelled?: SortOrder
  }

  export type EscrowWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    objectId?: string
    AND?: EscrowWhereInput | EscrowWhereInput[]
    OR?: EscrowWhereInput[]
    NOT?: EscrowWhereInput | EscrowWhereInput[]
    sender?: StringNullableFilter<"Escrow"> | string | null
    recipient?: StringNullableFilter<"Escrow"> | string | null
    keyId?: StringNullableFilter<"Escrow"> | string | null
    itemId?: StringNullableFilter<"Escrow"> | string | null
    swapped?: BoolFilter<"Escrow"> | boolean
    cancelled?: BoolFilter<"Escrow"> | boolean
  }, "id" | "objectId">

  export type EscrowOrderByWithAggregationInput = {
    id?: SortOrder
    objectId?: SortOrder
    sender?: SortOrderInput | SortOrder
    recipient?: SortOrderInput | SortOrder
    keyId?: SortOrderInput | SortOrder
    itemId?: SortOrderInput | SortOrder
    swapped?: SortOrder
    cancelled?: SortOrder
    _count?: EscrowCountOrderByAggregateInput
    _avg?: EscrowAvgOrderByAggregateInput
    _max?: EscrowMaxOrderByAggregateInput
    _min?: EscrowMinOrderByAggregateInput
    _sum?: EscrowSumOrderByAggregateInput
  }

  export type EscrowScalarWhereWithAggregatesInput = {
    AND?: EscrowScalarWhereWithAggregatesInput | EscrowScalarWhereWithAggregatesInput[]
    OR?: EscrowScalarWhereWithAggregatesInput[]
    NOT?: EscrowScalarWhereWithAggregatesInput | EscrowScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Escrow"> | number
    objectId?: StringWithAggregatesFilter<"Escrow"> | string
    sender?: StringNullableWithAggregatesFilter<"Escrow"> | string | null
    recipient?: StringNullableWithAggregatesFilter<"Escrow"> | string | null
    keyId?: StringNullableWithAggregatesFilter<"Escrow"> | string | null
    itemId?: StringNullableWithAggregatesFilter<"Escrow"> | string | null
    swapped?: BoolWithAggregatesFilter<"Escrow"> | boolean
    cancelled?: BoolWithAggregatesFilter<"Escrow"> | boolean
  }

  export type CursorWhereInput = {
    AND?: CursorWhereInput | CursorWhereInput[]
    OR?: CursorWhereInput[]
    NOT?: CursorWhereInput | CursorWhereInput[]
    id?: StringFilter<"Cursor"> | string
    eventSeq?: StringFilter<"Cursor"> | string
    txDigest?: StringFilter<"Cursor"> | string
  }

  export type CursorOrderByWithRelationInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type CursorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CursorWhereInput | CursorWhereInput[]
    OR?: CursorWhereInput[]
    NOT?: CursorWhereInput | CursorWhereInput[]
    eventSeq?: StringFilter<"Cursor"> | string
    txDigest?: StringFilter<"Cursor"> | string
  }, "id">

  export type CursorOrderByWithAggregationInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
    _count?: CursorCountOrderByAggregateInput
    _max?: CursorMaxOrderByAggregateInput
    _min?: CursorMinOrderByAggregateInput
  }

  export type CursorScalarWhereWithAggregatesInput = {
    AND?: CursorScalarWhereWithAggregatesInput | CursorScalarWhereWithAggregatesInput[]
    OR?: CursorScalarWhereWithAggregatesInput[]
    NOT?: CursorScalarWhereWithAggregatesInput | CursorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cursor"> | string
    eventSeq?: StringWithAggregatesFilter<"Cursor"> | string
    txDigest?: StringWithAggregatesFilter<"Cursor"> | string
  }

  export type LockedCreateInput = {
    objectId: string
    keyId?: string | null
    creator?: string | null
    itemId?: string | null
    deleted?: boolean
  }

  export type LockedUncheckedCreateInput = {
    id?: number
    objectId: string
    keyId?: string | null
    creator?: string | null
    itemId?: string | null
    deleted?: boolean
  }

  export type LockedUpdateInput = {
    objectId?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LockedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectId?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LockedCreateManyInput = {
    id?: number
    objectId: string
    keyId?: string | null
    creator?: string | null
    itemId?: string | null
    deleted?: boolean
  }

  export type LockedUpdateManyMutationInput = {
    objectId?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LockedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectId?: StringFieldUpdateOperationsInput | string
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EscrowCreateInput = {
    objectId: string
    sender?: string | null
    recipient?: string | null
    keyId?: string | null
    itemId?: string | null
    swapped?: boolean
    cancelled?: boolean
  }

  export type EscrowUncheckedCreateInput = {
    id?: number
    objectId: string
    sender?: string | null
    recipient?: string | null
    keyId?: string | null
    itemId?: string | null
    swapped?: boolean
    cancelled?: boolean
  }

  export type EscrowUpdateInput = {
    objectId?: StringFieldUpdateOperationsInput | string
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    swapped?: BoolFieldUpdateOperationsInput | boolean
    cancelled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EscrowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectId?: StringFieldUpdateOperationsInput | string
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    swapped?: BoolFieldUpdateOperationsInput | boolean
    cancelled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EscrowCreateManyInput = {
    id?: number
    objectId: string
    sender?: string | null
    recipient?: string | null
    keyId?: string | null
    itemId?: string | null
    swapped?: boolean
    cancelled?: boolean
  }

  export type EscrowUpdateManyMutationInput = {
    objectId?: StringFieldUpdateOperationsInput | string
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    swapped?: BoolFieldUpdateOperationsInput | boolean
    cancelled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EscrowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectId?: StringFieldUpdateOperationsInput | string
    sender?: NullableStringFieldUpdateOperationsInput | string | null
    recipient?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    itemId?: NullableStringFieldUpdateOperationsInput | string | null
    swapped?: BoolFieldUpdateOperationsInput | boolean
    cancelled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CursorCreateInput = {
    id: string
    eventSeq: string
    txDigest: string
  }

  export type CursorUncheckedCreateInput = {
    id: string
    eventSeq: string
    txDigest: string
  }

  export type CursorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type CursorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type CursorCreateManyInput = {
    id: string
    eventSeq: string
    txDigest: string
  }

  export type CursorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type CursorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LockedCountOrderByAggregateInput = {
    id?: SortOrder
    objectId?: SortOrder
    keyId?: SortOrder
    creator?: SortOrder
    itemId?: SortOrder
    deleted?: SortOrder
  }

  export type LockedAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LockedMaxOrderByAggregateInput = {
    id?: SortOrder
    objectId?: SortOrder
    keyId?: SortOrder
    creator?: SortOrder
    itemId?: SortOrder
    deleted?: SortOrder
  }

  export type LockedMinOrderByAggregateInput = {
    id?: SortOrder
    objectId?: SortOrder
    keyId?: SortOrder
    creator?: SortOrder
    itemId?: SortOrder
    deleted?: SortOrder
  }

  export type LockedSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EscrowCountOrderByAggregateInput = {
    id?: SortOrder
    objectId?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    keyId?: SortOrder
    itemId?: SortOrder
    swapped?: SortOrder
    cancelled?: SortOrder
  }

  export type EscrowAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EscrowMaxOrderByAggregateInput = {
    id?: SortOrder
    objectId?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    keyId?: SortOrder
    itemId?: SortOrder
    swapped?: SortOrder
    cancelled?: SortOrder
  }

  export type EscrowMinOrderByAggregateInput = {
    id?: SortOrder
    objectId?: SortOrder
    sender?: SortOrder
    recipient?: SortOrder
    keyId?: SortOrder
    itemId?: SortOrder
    swapped?: SortOrder
    cancelled?: SortOrder
  }

  export type EscrowSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CursorCountOrderByAggregateInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type CursorMaxOrderByAggregateInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type CursorMinOrderByAggregateInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LockedDefaultArgs instead
     */
    export type LockedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LockedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EscrowDefaultArgs instead
     */
    export type EscrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EscrowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursorDefaultArgs instead
     */
    export type CursorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CursorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}